# -*- coding: utf-8 -*-
"""DATA STORY Angelina.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gu7f7Gf4ff3ivcD18XYUCd6NJHhOM_pF

# ***Data Story - 1***
"""



import csv
import plotly.express as px
import pandas as pd
import statistics
import plotly.graph_objects as go
import numpy as np
import seaborn as sns

df = pd.read_csv("savings_data.csv")

fig = px.scatter(df, y= "quant_saved", color = "female")
fig.show()

"""## ***A scattered graph to get an idea of how it will look.***
Yellow color for female.
Blue clor for male.
"""

with open("savings_data.csv", newline = "") as f:
   reader = csv.reader(f)
   savings_data = list(reader)

savings_data.pop(0)

# find the total number of males and females
total_entries = len(savings_data)
females = 0

for i in savings_data:
   if int(i[1]) == 1:
      females += 1


fig = go.Figure(go.Bar(x = ["Females", "Males"], y = [females, total_entries - females]))
fig.show()

all_savings = []
for data in savings_data:
   all_savings.append(float(data[0]))

print(f"Mean of the Data- {statistics.mean(all_savings)}")
print(f"mode of the Data- {statistics.mode(all_savings)}")
print(f"Median of the Data- {statistics.median(all_savings)}")

females = []
males = []

for data in savings_data: 
   if int(data[1]) == 1:
      females.append(float(data[0]))
   else:
      males.append(float(data[0]))

print(f"Mean of the total females- {statistics.mean(females)}")
print(f"Mode of the total females- {statistics.mode(females)}")
print(f"Median of the total females- {statistics.median(females)}")
print()
print(f"Mean of the total males- {statistics.mean(males)}")
print(f"Mode of the total males- {statistics.mode(males)}")
print(f"Median of the total males- {statistics.median(males)}")

print(f"Standard deviation of the entire data- {statistics.stdev(all_savings)}")
print(f"Standard deviation for females- {statistics.stdev(females)}")
print(f"Standard deviation for males- {statistics.stdev(males)}")

wealth = []
savings = []
for data in savings_data:
  if float(data[3]) != '0':
    wealth.append(float(data[3]))
    savings.append(float(data[0]))

correlation = np.corrcoef(wealth, savings)

print(f"Correlation between the wealth of the person and the savings is {correlation[0,1]}")


sns.boxplot(data = df, x = df["quant_saved"])

q1 = df["quant_saved"].quantile(0.25)
q3 = df["quant_saved"].quantile(0.75)
iqr = q3 - q1
print(f"Q1 - {q1}") 
print(f"Q3 - {q3}") 
print(f"IQR - {iqr}") 
lower_whisker = q1 - 1.5*iqr 
upper_whisker = q3 + 1.5*iqr 
print(f"Lower Whisker - {lower_whisker}") 
print(f"Upper Whisker - {upper_whisker}") 
#Creating a new DataFrame 
new_df = df[df["quant_saved"] < upper_whisker]

import plotly.figure_factory as ff
all_savings = new_df["quant_saved"].tolist() 
print(f"Mean of savings - {statistics.mean(all_savings)}") 
print(f"Median of savings - {statistics.median(all_savings)}") 
print(f"Mode of savings - {statistics.mode(all_savings)}") 
print(f"Standard deviation in savings - {statistics.stdev(all_savings)}") 

fig = ff.create_distplot([all_savings], ["Savings"], show_hist = False)
fig.show()

import random
sampling_mean_list = []
for i in range(0,1000):
  tempList = []
  for j in range(0,100):
    tempList.append(random.choice(all_savings))
  sampling_mean_list.append(statistics.mean(tempList))
meanSampling = statistics.mean(sampling_mean_list)
print(f"Mean of Population - {statistics.mean(all_savings)}")
print(f"Mean of Sampling - {meanSampling}")
print(f"Standard Deviation of Sampling - {statistics.stdev(sampling_mean_list)}")
fig = ff.create_distplot([sampling_mean_list], ["Savings"], show_hist = False)
fig.add_trace(go.Scatter(x = [meanSampling, meanSampling], y = [0, 0.1], mode = "lines"))
fig.show()

print(f"Standard deviation of the sampling data- {statistics.stdev(sampling_mean_list)}")

print(f"Mean of population- {statistics.mean(all_savings)}")
print(f"Mean of sampling distribution - {meanSampling}")

df2 = new_df[new_df.wealthy != '0']
wealthy = df2["wealthy"].tolist()

savings = df2["quant_saved"].tolist()

correlation = np.corrcoef(wealthy, savings)

print(f"Correlation between the wealth of the person and the savings is {correlation[0,1]}")

Female_df = new_df.loc[new_df["female"] == 1]
Male_df = new_df.loc[new_df["female"] == 0]
Male_savings = Male_df["quant_saved"].tolist()
sampling_mean_list = []
for i in range(0,1000):
  tempList = []
  for j in range(0,100):
    tempList.append(random.choice(Male_savings))  
  sampling_mean_list.append(statistics.mean(tempList))
mean_sampling = statistics.mean(sampling_mean_list)
Sample = statistics.stdev(sampling_mean_list)
Sample_first_std_deviation_start, Sample_first_std_deviation_end = mean_sampling -Sample, mean_sampling+Sample
Sample_second_std_deviation_start, Sample_second_std_deviation_end = mean_sampling -(2*Sample), mean_sampling+(2*Sample)
Sample_third_std_deviation_start, Sample_third_std_deviation_end = mean_sampling -(3*Sample), mean_sampling+(3*Sample)
print(f"First (start) - {Sample_first_std_deviation_start} and First (end) - {Sample_first_std_deviation_end}")
print(f"Second (start) - {Sample_second_std_deviation_start} and First (end) - {Sample_second_std_deviation_end}")
print(f"Third (start) - {Sample_third_std_deviation_start} and First (end) - {Sample_third_std_deviation_end}")
Female_savings = Female_df["quant_saved"].tolist()
sampling_mean_list2 = []
for i in range(0,1000):
  tempList2 = []
  for j in range(0,100):
    tempList2.append(random.choice(Female_savings))  
  sampling_mean_list2.append(statistics.mean(tempList2))
mean_sampling2 = statistics.mean(sampling_mean_list2)
Sample2 = statistics.stdev(sampling_mean_list)
Sample2_first_std_deviation_start, Sample2_first_std_deviation_end = mean_sampling -Sample2, mean_sampling+Sample2
Sample2_second_std_deviation_start, Sample2_second_std_deviation_end = mean_sampling -(2*Sample2), mean_sampling+(2*Sample2)
Sample2_third_std_deviation_start, Sample2_third_std_deviation_end = mean_sampling -(3*Sample2), mean_sampling+(3*Sample2)
z_score = (mean_sampling2 - mean_sampling) / Sample
print(f"The z_score for the Data is {z_score}")